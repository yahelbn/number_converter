{"version":3,"sources":["AppElements.js","components/ResultsRows/ResultsRowsElements.js","components/ResultRow/ResultRowElements.js","components/ResultRow/index.js","components/ResultsRows/index.js","App.js","utils.js","index.js"],"names":["AppContainer","styled","div","isDarkMode","NumberInput","input","StyledButton","button","Row","HeaderH1","h1","Container","Label","label","margin","Form","form","MessageText","error","Column","HeaderH2","h2","Card","ResultRow","data","handleRemove","idx","number","numberConvert","timestamp","type","onClick","animation","trash2","size","ResultsRows","historyArr","length","map","App","useState","setNumber","setIsDarkMode","localStorage","getItem","JSON","parse","setHistoryArr","undefined","message","setMessage","setError","currentResult","setCurrentResult","handlSubmit","e","preventDefault","test","n","custom_join_character","units","tens","scales","start","end","chunks","chunksLen","ints","i","word","words","string","toString","and","parseInt","push","slice","Math","max","split","reverse","parseFloat","splice","includes","join","numberToEnglish","charAt","toUpperCase","console","log","Date","values","setItem","stringify","onChange","checked","onSubmit","target","value","required","placeholder","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.37122687.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const AppContainer = styled.div`\r\n  background-color: ${({ isDarkMode }) =>\r\n    isDarkMode ? \"slategray\" : \"honeydew\"};\r\n  min-height: 1000px;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  top: 0;\r\n  z-index: 0;\r\n`;\r\n\r\nexport const NumberInput = styled.input`\r\n  padding: 6px;\r\n  padding-right: 20px;\r\n  margin-bottom: 15px;\r\n  border: none;\r\n  border-radius: 4px;\r\n  border: 1.7px solid lightgray;\r\n\r\n  &:hover {\r\n    border: 1.7px solid lightskyblue;\r\n  }\r\n  ::-webkit-input-placeholder {\r\n    color: lightgray;\r\n    font-size: 0.8rem;\r\n  }\r\n`;\r\n\r\nexport const StyledButton = styled.button`\r\n  font-family: \"Roboto\", sans-serif;\r\n  font-size: 13px;\r\n  text-transform: uppercase;\r\n  padding: 10px 10px;\r\n  letter-spacing: 2.5px;\r\n  font-weight: 500;\r\n  color: #000;\r\n  background-color: #fff;\r\n  border: ${({ isDarkMode }) =>\r\n    isDarkMode ? \"none\" : \"0.3px solid lightgray\"};\r\n  border-radius: 45px;\r\n  box-shadow: 0px 8px 15px rgba(0, 0, 0, 0.1);\r\n  transition: all 0.3s ease 0s;\r\n  cursor: pointer;\r\n  outline: none;\r\n  &:hover {\r\n    background-color: tan;\r\n    box-shadow: 0px 15px 20px #d2b48c;\r\n    color: #fff;\r\n    transform: translateY(-7px);\r\n  }\r\n`;\r\n\r\nexport const Row = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: baseline;\r\n  flex-direction: row;\r\n  margin: 20px;\r\n\r\n  @media screen and (max-width: 480px) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nexport const Column = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  margin: 20px;\r\n`;\r\n\r\nexport const HeaderH1 = styled.h1`\r\n  margin-top: 20px;\r\n  margin-bottom: 35px;\r\n  text-shadow: 1px 1px 2px #000000;\r\n  letter-spacing: 0.2rem;\r\n\r\n  color: ${({ isDarkMode }) => (isDarkMode ? \"honeydew\" : \"lightsteelblue\")};\r\n\r\n  @media screen and (max-width: 480px) {\r\n    font-size: 25px;\r\n  }\r\n`;\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  height: 100%;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n  margin-right: 20px;\r\n  font-weight: bold;\r\n  //margin: 20px 25px;\r\n  text-align: center;\r\n  font-size: 15px;\r\n\r\n  margin: ${({ margin }) => (margin ? \"20px 25px\" : \"13px 13px\")};\r\n  color: ${({ isDarkMode }) => (isDarkMode ? \"white\" : \"black\")};\r\n  @media screen and (max-width: 480px) {\r\n    font-size: 12px;\r\n  }\r\n`;\r\n\r\nexport const Form = styled.form`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  margin: 20px;\r\n`;\r\n\r\nexport const MessageText = styled.div`\r\n  margin-top: 20px;\r\n  font-size: 10px;\r\n  color: ${({ error }) => (error ? \"salmon\" : \"green\")};\r\n  border: ${({ error }) => (error ? \"1px solid salmon\" : \"1px solid green\")};\r\n\r\n  background-color: mintcream;\r\n  padding: 10px 10px;\r\n  border-radius: 20px;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Column = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  margin: 20px;\r\n`;\r\n\r\nexport const HeaderH2 = styled.h2`\r\n  margin-bottom: 35px;\r\n  color: lightsteelblue;\r\n  text-shadow: 1px 1px 2px #000000;\r\n  letter-spacing: 0.1rem;\r\n  color: ${({ isDarkMode }) => (isDarkMode ? \"honeydew\" : \"lightsteelblue\")};\r\n  text-align: center;\r\n\r\n  @media screen and (max-width: 480px) {\r\n    font-size: 22px;\r\n  }\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Card = styled.div`\r\n  cursor: pointer;\r\n  background-color: white;\r\n  padding: 10px 10px;\r\n  border: 1px grey solid;\r\n  width: 60%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  border-radius: 10px;\r\n  -moz-box-shadow: 5px 5px 5px rgba(68, 68, 68, 0.6);\r\n  -webkit-box-shadow: 5px 5px 5px rgba(68, 68, 68, 0.6);\r\n  box-shadow: 5px 5px 5px rgba(68, 68, 68, 0.6);\r\n  margin: 10px;\r\n  transition: 0.8s;\r\n\r\n  &:hover {\r\n    background-color: lightgray;\r\n    opacity: 0.6;\r\n  }\r\n`;\r\n\r\nexport const Label = styled.label`\r\n  margin-right: 20px;\r\n  font-size: 15px;\r\n  font-weight: bold;\r\n  text-align: center;\r\n  //margin: 20px 25px;\r\n  margin: ${({ margin }) => (margin ? \"20px 25px\" : \"13px 13px\")};\r\n\r\n  @media screen and (max-width: 480px) {\r\n    font-size: 12px;\r\n  }\r\n`;\r\n\r\nexport const StyledButton = styled.button`\r\n  font-family: \"Roboto\", sans-serif;\r\n  font-size: 13px;\r\n  text-transform: uppercase;\r\n  padding: 10px 10px;\r\n  letter-spacing: 2.5px;\r\n  font-weight: 500;\r\n  color: #000;\r\n  background-color: #fff;\r\n  border: 0.4px black solid;\r\n  border-radius: 45px;\r\n  box-shadow: 0px 8px 15px rgba(0, 0, 0, 0.1);\r\n  transition: all 0.3s ease 0s;\r\n  cursor: pointer;\r\n  outline: none;\r\n  &:hover {\r\n    background-color: tan;\r\n    box-shadow: 0px 15px 20px #d2b48c;\r\n    color: #fff;\r\n    transform: translateY(-7px);\r\n  }\r\n`;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Label, Card, StyledButton } from \"./ResultRowElements\";\r\nimport UseAnimations from \"react-useanimations\";\r\n\r\nimport trash2 from \"react-useanimations/lib/trash2\";\r\n\r\nconst ResultRow = ({ data, handleRemove, idx }) => {\r\n  /*In this component we create each result row */\r\n  return (\r\n    <Card key={idx}>\r\n      <Label>The input number: {data.number},</Label>\r\n      <Label>in words: {data.numberConvert},</Label>\r\n      <Label> Submit in: {data.timestamp}</Label>\r\n\r\n      <StyledButton type=\"button\" onClick={() => handleRemove(idx)}>\r\n        <UseAnimations animation={trash2} size={30} />\r\n      </StyledButton>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ResultRow;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { HeaderH2, Label, Column, Card } from \"./ResultsRowsElements\";\r\nimport ResultRow from \"./../ResultRow/index\";\r\nconst ResultsRows = ({ historyArr, handleRemove, isDarkMode }) => {\r\n  /*In this component we run on the \"historyArr\" coming from the previous component and initialize each result row */\r\n  return (\r\n    <Column>\r\n      {historyArr.length === 0 ? (\r\n        <HeaderH2 isDarkMode={isDarkMode} margin={true}>\r\n          Please enter some number\r\n        </HeaderH2>\r\n      ) : (\r\n        <HeaderH2 isDarkMode={isDarkMode} margin={true}>\r\n          History of user inputs and results :{\" \"}\r\n        </HeaderH2>\r\n      )}\r\n\r\n      {historyArr.map((data, idx) => {\r\n        return (\r\n          <ResultRow\r\n            key={idx}\r\n            data={data}\r\n            idx={idx}\r\n            handleRemove={handleRemove}\r\n          />\r\n        );\r\n      })}\r\n    </Column>\r\n  );\r\n};\r\n\r\nexport default ResultsRows;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport {\r\n  StyledButton,\r\n  NumberInput,\r\n  Row,\r\n  HeaderH1,\r\n  Label,\r\n  Container,\r\n  AppContainer,\r\n  Form,\r\n  MessageText,\r\n} from \"./AppElements\";\r\nimport converter from \"number-to-words\";\r\nimport DarkModeToggle from \"react-dark-mode-toggle\";\r\nimport ResultsRows from \"./components/ResultsRows/index\";\r\n\r\n/* Function inWords convert number to words - without package or api */\r\nimport { numberToEnglish } from \"./utils\";\r\n\r\nconst App = () => {\r\n  /* initialization - states  */\r\n  const [number, setNumber] = useState();\r\n  const [isDarkMode, setIsDarkMode] = useState(() => false);\r\n\r\n  /* Inside this state we check for previous local storage data on \"historyArr\" item if exist use it.*/\r\n  const [historyArr, setHistoryArr] = useState(\r\n    localStorage.getItem(\"historyArr\")\r\n      ? JSON.parse(localStorage.getItem(\"historyArr\"))\r\n      : []\r\n  );\r\n  const [message, setMessage] = useState(undefined);\r\n  const [error, setError] = useState(false);\r\n  const [currentResult, setCurrentResult] = useState(undefined);\r\n\r\n  function handlSubmit(e) {\r\n    e.preventDefault();\r\n    /* Check if input-number is a number */\r\n    if (isNumeric(number)) {\r\n      /* Adding the number to history */\r\n      let numberConvert = numberToEnglish(number);\r\n      numberConvert =\r\n        numberConvert.charAt(0).toUpperCase() + numberConvert.slice(1);\r\n      console.log(numberConvert);\r\n      /* For using the function inWords from utils from api , but its not appropriate to output*/\r\n      //let numberConvert = converter.toWords(number);\r\n      const timestamp = new Date().toString();\r\n      const values = [...historyArr];\r\n      values.push({ number, numberConvert, timestamp });\r\n      setCurrentResult({ number, numberConvert, timestamp });\r\n      setHistoryArr(values);\r\n      localStorage.setItem(\"historyArr\", JSON.stringify(values));\r\n      setError(false);\r\n      setMessage(\"Your result added to history!\");\r\n    } else {\r\n      setMessage(\"Try again , enter a negative or positive number please.\");\r\n      setError(true);\r\n      setCurrentResult(undefined);\r\n    }\r\n  }\r\n\r\n  /* Check if string is negative or positive number*/\r\n  function isNumeric(value) {\r\n    return /^-?\\d+$/.test(value);\r\n  }\r\n\r\n  /* Remove each row of result - by sending this function to child components*/\r\n  const handleRemove = (idx) => {\r\n    const values = [...historyArr];\r\n    values.splice(idx, 1);\r\n    setHistoryArr(values);\r\n    localStorage.setItem(\"historyArr\", JSON.stringify(values));\r\n    setCurrentResult(undefined);\r\n    setMessage(undefined);\r\n  };\r\n\r\n  return (\r\n    <AppContainer isDarkMode={isDarkMode}>\r\n      <Container>\r\n        <HeaderH1 isDarkMode={isDarkMode}>Number Converter </HeaderH1>\r\n        <DarkModeToggle\r\n          onChange={setIsDarkMode}\r\n          checked={isDarkMode}\r\n          size={50}\r\n        />\r\n        <Form onSubmit={handlSubmit}>\r\n          <Row>\r\n            <Label isDarkMode={isDarkMode} margin={true}>\r\n              Select a number:\r\n            </Label>\r\n            <NumberInput\r\n              onChange={(e) => setNumber(e.target.value)}\r\n              type=\"text\"\r\n              required\r\n              placeholder=\"write number...\"\r\n            ></NumberInput>\r\n          </Row>\r\n          {currentResult && (\r\n            <Label isDarkMode={isDarkMode}>\r\n              The number {currentResult.number} , in words:\r\n              {\" \" + currentResult.numberConvert}\r\n            </Label>\r\n          )}\r\n          <StyledButton\r\n            isDarkMode={isDarkMode}\r\n            onClick={handlSubmit}\r\n            onSubmit={handlSubmit}\r\n          >\r\n            Submit\r\n          </StyledButton>\r\n\r\n          {message && <MessageText error={error}>{message}</MessageText>}\r\n        </Form>\r\n        <ResultsRows\r\n          isDarkMode={isDarkMode}\r\n          historyArr={historyArr}\r\n          handleRemove={handleRemove}\r\n        />\r\n      </Container>\r\n    </AppContainer>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","export function numberToEnglish(n, custom_join_character) {\r\n  var string = n.toString(),\r\n    units,\r\n    tens,\r\n    scales,\r\n    start,\r\n    end,\r\n    chunks,\r\n    chunksLen,\r\n    chunk,\r\n    ints,\r\n    i,\r\n    word,\r\n    words;\r\n\r\n  var and = custom_join_character || \"and\";\r\n\r\n  /* Is number zero? */\r\n  if (parseInt(string) === 0) {\r\n    return \"zero\";\r\n  }\r\n\r\n  /* Array of units as words */\r\n  units = [\r\n    \"\",\r\n    \"one\",\r\n    \"two\",\r\n    \"three\",\r\n    \"four\",\r\n    \"five\",\r\n    \"six\",\r\n    \"seven\",\r\n    \"eight\",\r\n    \"nine\",\r\n    \"ten\",\r\n    \"eleven\",\r\n    \"twelve\",\r\n    \"thirteen\",\r\n    \"fourteen\",\r\n    \"fifteen\",\r\n    \"sixteen\",\r\n    \"seventeen\",\r\n    \"eighteen\",\r\n    \"nineteen\",\r\n  ];\r\n\r\n  /* Array of tens as words */\r\n  tens = [\r\n    \"\",\r\n    \"\",\r\n    \"twenty\",\r\n    \"thirty\",\r\n    \"forty\",\r\n    \"fifty\",\r\n    \"sixty\",\r\n    \"seventy\",\r\n    \"eighty\",\r\n    \"ninety\",\r\n  ];\r\n\r\n  /* Array of scales as words */\r\n  scales = [\r\n    \"\",\r\n    \"thousand\",\r\n    \"million\",\r\n    \"billion\",\r\n    \"trillion\",\r\n    \"quadrillion\",\r\n    \"quintillion\",\r\n    \"sextillion\",\r\n    \"septillion\",\r\n    \"octillion\",\r\n    \"nonillion\",\r\n    \"decillion\",\r\n    \"undecillion\",\r\n    \"duodecillion\",\r\n    \"tredecillion\",\r\n    \"quatttuor-decillion\",\r\n    \"quindecillion\",\r\n    \"sexdecillion\",\r\n    \"septen-decillion\",\r\n    \"octodecillion\",\r\n    \"novemdecillion\",\r\n    \"vigintillion\",\r\n    \"centillion\",\r\n  ];\r\n\r\n  /* Split user arguemnt into 3 digit chunks from right to left */\r\n  start = string.length;\r\n  chunks = [];\r\n  while (start > 0) {\r\n    end = start;\r\n    chunks.push(string.slice((start = Math.max(0, start - 3)), end));\r\n  }\r\n\r\n  /* Check if function has enough scale words to be able to stringify the user argument */\r\n  chunksLen = chunks.length;\r\n  if (chunksLen > scales.length) {\r\n    return \"\";\r\n  }\r\n\r\n  /* Stringify each integer in each chunk */\r\n  words = [];\r\n  for (i = 0; i < chunksLen; i++) {\r\n    chunk = parseInt(chunks[i]);\r\n    if (chunk) {\r\n      /* Split chunk into array of individual integers */\r\n      ints = chunks[i].split(\"\").reverse().map(parseFloat);\r\n\r\n      /* If tens integer is 1, i.e. 10, then add 10 to units integer */\r\n      if (ints[1] === 1) {\r\n        ints[0] += 10;\r\n      }\r\n\r\n      /* Add scale word if chunk is not zero and array item exists */\r\n      if ((word = scales[i])) {\r\n        words.push(word);\r\n      }\r\n\r\n      /* Add unit word if array item exists */\r\n      if ((word = units[ints[0]])) {\r\n        words.push(word);\r\n      }\r\n\r\n      /* Add tens word if array item exists */\r\n      if ((word = tens[ints[1]])) {\r\n        if (ints[1] > 2 && string.length <= 4 && ints[0] !== 0) {\r\n          words.push(\"-\");\r\n        }\r\n        words.push(word);\r\n      }\r\n\r\n      /* Add 'and' string after units or tens integer if: */\r\n      if (ints[0] || ints[1]) {\r\n        /* Chunk has a hundreds integer or chunk is the first of multiple chunks */\r\n        if (ints[2] || (!i && chunksLen)) {\r\n          words.push(and);\r\n        }\r\n      }\r\n\r\n      /* Add hundreds word if array item exists */\r\n      if ((word = units[ints[2]])) {\r\n        words.push(word + \" hundred\");\r\n      }\r\n    }\r\n  }\r\n\r\n  /* Take Care to numbers size=1 */\r\n  if (string.length === 1) {\r\n    words.splice(1, 1);\r\n  }\r\n\r\n  /* handle to numbers size=2 */\r\n  if (string.length === 2) {\r\n    if (words.length === 4 && words.includes(\"-\")) {\r\n      words.splice(3, 1);\r\n    } else if (words.includes(\"-\")) {\r\n      words.splice(1, 1);\r\n    } else {\r\n      if (words.length == 2) {\r\n        words.splice(1, 1);\r\n      } else {\r\n        words.splice(2, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  return words.reverse().join(\" \");\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}